@model MeShop.Models.ViewModels.CartVM
@{
    ViewData["Title"] = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="page-title-area">
    <div class="container">
        <div class="page-title-content">
            <h2>Giỏ hàng</h2>
        </div>
    </div>
</div>

<section class="checkout-area ptb-100">
    <div class="container-fluid">
            <div class="row justify-content-center">
                <div class="col-lg-7 col-md-12">
                    <div class="billing-details">
                        <h3 class="title">Thông tin đặt hàng</h3>
                        <div class="row justify-content-center">
                            @if (User.Identity.IsAuthenticated)
                            {
                                <div class="col-lg-12 col-md-12 mt-30">
                                    <div class="col-lg-3 col-md-12 mb-md-2">
                                        <div class="nice-select" tabindex="0">
                                            <span class="current">Chọn từ sổ địa chỉ</span>
                                            <ul class="list">
                                                @foreach (var address in (List<User_Address>)ViewData["AddressList"])
                                                {
                                                    <li data-value="@address.Address_Detail" class="option">@address.Address_Detail</li>
                                                }
                                            </ul>
                                        </div>
                                    </div>
                                </div>
                            }
                        @await Html.PartialAsync("Checkout", ViewData["Order"] as MeShop.Models.ViewModels.OrderVM)
                        </div>
                    </div>
                </div>
                <div class="col-lg-5 col-md-12">
                    <div class="cart-table table-responsive">
                        <table class="table ">
                            <thead>
                                <tr>
                                    <th scope="col">Sản phẩm</th>
                                    <th scope="col">Tên</th>
                                    <th scope="col">Đơn giá</th>
                                    <th scope="col">Số lượng</th>
                                    <th scope="col">Tổng tiền</th>
                                </tr>
                            </thead>

                            <tbody>
                                @foreach(var item in Model.Items)
                                {
                                    <tr>
                                        <td class="product-thumbnail">
                                            <a href="#">
                                                <img src="@Url.Content(item.PathImage)" alt="item">
                                            </a>
                                        </td>

                                        <td class="product-name">
                                            <a href="#">@item.ProductName</a>
                                            <ul>
                                                <li>Size: <span>@item.SizeName</span></li>
                                            </ul>
                                        </td>

                                        <td class="product-price">
                                            <div class="d-flex">
                                                @if(item.Discount_Active != null)
                                                {
                                                    <p class="pe-1 fw-bold"><span class="text-danger">@String.Format("{0:N0}", item.Price_AfterDiscount)đ</span></p>
                                                    <p class="text-decoration-line-through fw-bold">@String.Format("{0:N0}", item.Price)đ</p>
                                                }
                                                else
                                                {
                                                    <p class="pe-1 fw-bold"><span class="text-danger">@String.Format("{0:N0}", item.Price_AfterDiscount)đ</span></p>
                                                }
                                            </div>
                                        </td>

                                        <td class="product-subtotal">
                                            <span class="subtotal-amount">@item.quantity</span>
                                        </td>

                                        <td class="product-subtotal">
                                          
                                            <div class="d-flex">
                                                @if(item.Discount_Active != null)
                                                {
                                                    <p class="pe-1 fw-bold"><span class="text-danger">@String.Format("{0:N0}", item.Price_AfterDiscount * item.quantity)đ</span></p>
                                                    <p class="pe-4 text-decoration-line-through fw-bold">@String.Format("{0:N0}", item.Price * item.quantity)đ</p>
                                                }
                                                else
                                                {
                                                    <p class="pe-1 fw-bold"><span class="text-danger">@String.Format("{0:N0}", item.Price_AfterDiscount * item.quantity)đ</span></p>
                                                }
                                                
                                            </div>
                                        </td>
                                        <td class="product-subtotal">
                                            <a asp-action="RemoveItem" asp-route-product_size_id="@item.ProductSize_Id" class="remove"><i class="bx bx-trash"></i></a>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                    <div class="cart-totals">
                        <h3>Tổng tiền</h3>

                        <ul>
                            <li>Tạm tính <span>@String.Format("{0:N0}", Model.Total)đ</span></li>
                            <li>Phí giao hàng <span>Miễn phí</span></li>
                            <li>Tổng <span>@String.Format("{0:N0}", Model.Total)đ</span></li>
                        </ul>
                    </div>
                </div>
            </div>
       
    </div>
</section>

@section Scripts
{
    <script>
        document.addEventListener("DOMContentLoaded", async function () {
            var citis = document.getElementById("city");
            var districts = document.getElementById("district");
            var wards = document.getElementById("ward");

            try {
                const response = await fetch("https://raw.githubusercontent.com/kenzouno1/DiaGioiHanhChinhVN/master/data.json");
                const data = await response.json();
                renderCity(data);
            } catch (error) {
                console.error('Error fetching data:', error);
            }

            function renderCity(data) {
                updateSelect(citis, data.map(x => ({ name: x.Name, id: x.Id })), "Chọn Tỉnh/Thành");

                citis.onchange = function () {
                    updateSelect(districts, [], "Chọn Quận/Huyện");
                    updateSelect(wards, [], "Chọn Phường/Xã");
                    districts.length = 1;
                    wards.length = 1;
                    if (this.value != "") {
                        const result = data.filter(n => n.Name === this.value);
                        updateSelect(districts, result[0].Districts.map(k => ({ name: k.Name, id: k.Id })), "Chọn Quận/Huyện");
                    }
                };

                districts.onchange = function () {
                    updateSelect(wards, [], "Chọn Phường/Xã");
                    wards.length = 1;
                    const dataCity = data.filter(n => n.Name === citis.value);
                    if (this.value != "") {
                        const dataWards = dataCity[0].Districts.filter(n => n.Name === this.value)[0].Wards;
                        updateSelect(wards, dataWards.map(w => ({ name: w.Name, id: w.Id })), "Chọn Phường/Xã");
                    }
                };
            }

            function updateSelect(selectElement, options, placeholderText) {
                selectElement.innerHTML = `<option value="" selected>${placeholderText}</option>`;

                for (const option of options) {
                    selectElement.options[selectElement.options.length] = new Option(option.name, option.name);
                }
                $(selectElement).niceSelect('update');
            }

            $('select').niceSelect();
        });
    </script>
}



