// <auto-generated />
using System;
using MeShop.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MeShop.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240923193807_dvnmcxzmvncxzvhu")]
    partial class dvnmcxzmvncxzvhu
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MeShop.Models.AdminUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created_at")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Deleted_at")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Modified_at")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Admin_Users");
                });

            modelBuilder.Entity("MeShop.Models.Blog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Created_At")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Image_Id")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Image_Id")
                        .IsUnique()
                        .HasFilter("[Image_Id] IS NOT NULL");

                    b.ToTable("Blogs");
                });

            modelBuilder.Entity("MeShop.Models.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("MeShop.Models.Cart_Item", b =>
                {
                    b.Property<int>("ProductSize_Id")
                        .HasColumnType("int");

                    b.Property<int>("Cart_Id")
                        .HasColumnType("int");

                    b.Property<bool>("IsSelection")
                        .HasColumnType("bit");

                    b.Property<int>("quantity")
                        .HasColumnType("int");

                    b.HasKey("ProductSize_Id", "Cart_Id");

                    b.HasIndex("Cart_Id");

                    b.ToTable("Cart_Items");
                });

            modelBuilder.Entity("MeShop.Models.Discount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Created_At")
                        .HasColumnType("datetime2");

                    b.Property<string>("Desc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Discount_Percent")
                        .HasColumnType("int");

                    b.Property<DateTime>("Modified_At")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Discounts");
                });

            modelBuilder.Entity("MeShop.Models.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Product_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Product_Id");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("MeShop.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address_City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address_Detail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address_District")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address_Ward")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Created_At")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Modified_At")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Oder_Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Payment_Method")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Payment_MethodId")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("User_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Payment_MethodId");

                    b.HasIndex("User_Id");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("MeShop.Models.Order_Detail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Discount_Percent")
                        .HasColumnType("int");

                    b.Property<int>("Order_Id")
                        .HasColumnType("int");

                    b.Property<int>("Product_Size_Id")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("Unit_Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("Order_Id");

                    b.HasIndex("Product_Size_Id");

                    b.ToTable("Order_Details");
                });

            modelBuilder.Entity("MeShop.Models.Payment_Method", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Desc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Payment_Methods");
                });

            modelBuilder.Entity("MeShop.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Created_At")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Deleted_At")
                        .HasColumnType("datetime2");

                    b.Property<string>("Desc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Discount_Id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Modified_At")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ProductCategory_Id")
                        .HasColumnType("int");

                    b.Property<float>("Rating")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("Discount_Id");

                    b.HasIndex("ProductCategory_Id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("MeShop.Models.Product_Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created_At")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Deleted_At")
                        .HasColumnType("datetime2");

                    b.Property<string>("Desc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Modified_At")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Product_Categories");
                });

            modelBuilder.Entity("MeShop.Models.Product_Inventory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created_At")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Deleted_At")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Modified_At")
                        .HasColumnType("datetime2");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Products_Inventory");
                });

            modelBuilder.Entity("MeShop.Models.Product_Size", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ProductInventory_Id")
                        .HasColumnType("int");

                    b.Property<int?>("Product_Id")
                        .HasColumnType("int");

                    b.Property<int?>("Size_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductInventory_Id")
                        .IsUnique()
                        .HasFilter("[ProductInventory_Id] IS NOT NULL");

                    b.HasIndex("Product_Id");

                    b.HasIndex("Size_Id", "Product_Id")
                        .IsUnique()
                        .HasFilter("[Size_Id] IS NOT NULL AND [Product_Id] IS NOT NULL");

                    b.ToTable("Products_Size");
                });

            modelBuilder.Entity("MeShop.Models.Size", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Sizes");
                });

            modelBuilder.Entity("MeShop.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Cart_Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("Create_at")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("telephone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Cart_Id")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MeShop.Models.User_Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address_City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address_Detail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address_District")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address_Ward")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<int?>("User_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("User_Id");

                    b.ToTable("User_Addresses");
                });

            modelBuilder.Entity("MeShop.Models.Blog", b =>
                {
                    b.HasOne("MeShop.Models.Image", "Image")
                        .WithOne("Blog")
                        .HasForeignKey("MeShop.Models.Blog", "Image_Id");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("MeShop.Models.Cart_Item", b =>
                {
                    b.HasOne("MeShop.Models.Cart", "Cart")
                        .WithMany("Cart_Items")
                        .HasForeignKey("Cart_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MeShop.Models.Product_Size", "Product_Size")
                        .WithMany("Cart_Items")
                        .HasForeignKey("ProductSize_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product_Size");
                });

            modelBuilder.Entity("MeShop.Models.Image", b =>
                {
                    b.HasOne("MeShop.Models.Product", "Product")
                        .WithMany("Images")
                        .HasForeignKey("Product_Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Product");
                });

            modelBuilder.Entity("MeShop.Models.Order", b =>
                {
                    b.HasOne("MeShop.Models.Payment_Method", null)
                        .WithMany("Orders")
                        .HasForeignKey("Payment_MethodId");

                    b.HasOne("MeShop.Models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("User_Id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MeShop.Models.Order_Detail", b =>
                {
                    b.HasOne("MeShop.Models.Order", "Order")
                        .WithMany("Orders_Detail")
                        .HasForeignKey("Order_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MeShop.Models.Product_Size", "Product_Size")
                        .WithMany("Orders_Detail")
                        .HasForeignKey("Product_Size_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product_Size");
                });

            modelBuilder.Entity("MeShop.Models.Product", b =>
                {
                    b.HasOne("MeShop.Models.Discount", "Discount")
                        .WithMany("Products")
                        .HasForeignKey("Discount_Id");

                    b.HasOne("MeShop.Models.Product_Category", "Product_Category")
                        .WithMany("Products")
                        .HasForeignKey("ProductCategory_Id");

                    b.Navigation("Discount");

                    b.Navigation("Product_Category");
                });

            modelBuilder.Entity("MeShop.Models.Product_Size", b =>
                {
                    b.HasOne("MeShop.Models.Product_Inventory", "Product_Inventory")
                        .WithOne("Product_Size")
                        .HasForeignKey("MeShop.Models.Product_Size", "ProductInventory_Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MeShop.Models.Product", "Product")
                        .WithMany("Product_Sizes")
                        .HasForeignKey("Product_Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MeShop.Models.Size", "Size")
                        .WithMany("Product_Sizes")
                        .HasForeignKey("Size_Id");

                    b.Navigation("Product");

                    b.Navigation("Product_Inventory");

                    b.Navigation("Size");
                });

            modelBuilder.Entity("MeShop.Models.User", b =>
                {
                    b.HasOne("MeShop.Models.Cart", "Cart")
                        .WithOne("User")
                        .HasForeignKey("MeShop.Models.User", "Cart_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");
                });

            modelBuilder.Entity("MeShop.Models.User_Address", b =>
                {
                    b.HasOne("MeShop.Models.User", "User")
                        .WithMany("Addresses")
                        .HasForeignKey("User_Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("MeShop.Models.Cart", b =>
                {
                    b.Navigation("Cart_Items");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MeShop.Models.Discount", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("MeShop.Models.Image", b =>
                {
                    b.Navigation("Blog");
                });

            modelBuilder.Entity("MeShop.Models.Order", b =>
                {
                    b.Navigation("Orders_Detail");
                });

            modelBuilder.Entity("MeShop.Models.Payment_Method", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("MeShop.Models.Product", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("Product_Sizes");
                });

            modelBuilder.Entity("MeShop.Models.Product_Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("MeShop.Models.Product_Inventory", b =>
                {
                    b.Navigation("Product_Size");
                });

            modelBuilder.Entity("MeShop.Models.Product_Size", b =>
                {
                    b.Navigation("Cart_Items");

                    b.Navigation("Orders_Detail");
                });

            modelBuilder.Entity("MeShop.Models.Size", b =>
                {
                    b.Navigation("Product_Sizes");
                });

            modelBuilder.Entity("MeShop.Models.User", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
